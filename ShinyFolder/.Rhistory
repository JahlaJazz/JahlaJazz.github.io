nzv(build, saveMetric=T)
[,4]
nzv(build, saveMetric=T)[,4]
names(build)[!nzv(build, saveMetric=T)[,4]]
build[,names(build)[!nzv(build, saveMetric=T)[,4]]]
bb = build[,names(build)[!nzv(build, saveMetric=T)[,4]]]
str(bb)
1-.9997
varImp(fitrf)
conv <- confusionMatrix(predv, validation$problem_id)
pred(fitrf, training)
predict(fitrf, training)
confusionMatrix(predict(fitrf, training),testing$classe)
confusionMatrix(predict(fitrf, training),training$classe)
pred==testing$classe
mean(pred==testing$classe)
mean(pred==testing$classe)*100
(1-mean(pred==testing$classe))*100
round((1-mean(pred==testing$classe))*100,2)
sd(pred==testing$classe)
confoverall
conf
1-9978
1-.9978
conftable
confbyclass
fitrf$finalModel
names(fitrf$finalModel)
fitrf$finalModel$err.rate
apply(fitrf$finalModel$err.rate,2,mean)
fitrf$finalModel
names(fitrf$finalModel)
names(fitrf$finalModel$votes)
names(fitrf$finalModel$oob.times)
names(fitrf$finalModel$proximity)
fitrf$finalModel$proximity
names(fitrf$finalModel)
fitrf$finalModel$localImportance
fitrf$finalModel$importanceSD
fitrf$finalModel$importance
names(pred)
names(conf)
conf$overall
conf$table
conf$positive
conf$mode
ls()
mydir <- "C:/Data Science Specialization - John Hopkins University/Course 8 - Practical Machine Learning/Project/"
# THE FLOOWING SECTION HAS BEEN COMMENTED OUT BECUASE THE DATA LOCAL
#training <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")
#validation <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv")
#write.csv(training,paste0(mydir,"training.csv"))
#write.csv(validation,paste0(mydir,"validation.csv"))
# read in the training data set ( ie, build data set )
build = read.csv(paste0(mydir,"training.csv"),stringsAsFactors = F)
dim(build)
# read in the validation data set
validation = read.csv(paste0(mydir,"validation.csv"),stringsAsFactors = F)
dim(validation)
library(magrittr)
build <- build[,-c(1:5)]
ind = sapply(build, function(x) x=="#DIV/0!" | x=="")
build[ind] <- NA
colremove <- colSums(sapply(build,is.na))/(dim(build)[1]) > .95
build <- build[,!colremove]
build[,c(1, 55)]%<>% lapply(function(x) as.factor(as.character(x)))  # create factor variable
buildstr <- build
validation <- validation[,-c(1:5)]
ind = sapply(validation, function(x) x=="#DIV/0!" | x=="")
validation[ind] <- NA
colremove <- colSums(sapply(validation,is.na))/(dim(validation)[1]) > .95
validation <- validation[,!colremove]
validation[,c(1, 55)]%<>% lapply(function(x) as.factor(as.character(x)))  # create factor variable
library(caret)
set.seed(6464)
indext <- createDataPartition(y = build$classe, p = .75, list = F)
training <- build[indext,] ; dim(training)
testing <- build[-indext,] ; dim(testing)
library(randomForest)
set.seed(3498)
fitControl <- trainControl(method="cv", number = 5) # option for 5-fold cross validation
fitrf <- train( classe~., data = training, trControl = fitControl, method = "rf", ntree = 50)
fitrf
varImp(fitrf)
fitrf$finalModel
pred <- predict(fitrf, newdata = testing)
conf <- confusionMatrix(pred, testing$classe)
conftable <- conf$table ; conftable
confoverall <- round(conf$overall,4) ; confoverall
confbyclass <- round(conf$byClass,4) ; confbyclass
predv <- predict(fitrf, newdata = validation)
resultsv <- data.frame(problem_id = validation$problem_id, predicted = predv)
resultsv
getTree(fitrf, k =1, labelVar = F)
ls()
varImpPlot(fitrf)
fitrf
class(fitrf)
train.formula
names(fitrf)
plot(fitrf, type = "l")
plot(fitrf, type = "p")
plot(fitrf, type = "h")
plot(fitrf, type = "l")
dim(training)
names(fitrf$finalModel)
fitrf$finalModel$inbag
fitrf$finalModel$oob.times
names(fitrf$finalModel)
names(fitrf)
fitrf$finalModel$test
fitrf$finalModel$importance
importance(fitrf$finalModel)
varImp(fitrf, scale = FALSE)
library(randomForest)
set.seed(3498)
fitControl <- trainControl(method="cv", number = 5) # option for 5-fold cross validation
fitrf <- train( classe~., data = training, trControl = fitControl, method = "rf", ntree = 50, prox = TRUE)
fitrf
varImp(fitrf)
fitrf$finalModel
pred <- predict(fitrf, newdata = testing)
conf <- confusionMatrix(pred, testing$classe)
conftable <- conf$table ; conftable
confoverall <- round(conf$overall,4) ; confoverall
confbyclass <- round(conf$byClass,4) ; confbyclass
predv <- predict(fitrf, newdata = validation)
resultsv <- data.frame(problem_id = validation$problem_id, predicted = predv)
resultsv
plot(fitrf)
fitrf
varImp(fitrf)
names(fitrf)
names(fitrf$finalMOdel)
names(fitrf$finalModel)
fitrf$finalModel$proximity
impvar <- importance(fitrf)
impvar <- importance(fitrf$finalModel)
imp <- importance(fitrf$finalModel)
imp
impvar <- rownames(imp)[order(imp[,1], decreasing = TRUE)]
impvar
op <- par(mrow=c(2,3))
op <- par(mfrow=c(2,3))
for ( i in seq_along(impvar)){ fitrf, training, impvar[i], xlab = impvar[i], main = paste("Partial Dependence on", impar[i], ylim = c(30, 70))}
for ( i in seq_along(impvar)){ partialPlot(fitrf, training, impvar[i], xlab = impvar[i], main = paste("Partial Dependence on", impar[i], ylim = c(30, 70))}
for ( i in 1:10){ partialPlot(fitrf, training, impvar[i], xlab = impvar[i], main = paste("Partial Dependence on", impar[i], ylim = c(30, 70))}
for (i in 1:10){ partialPlot(fitrf, training, impvar[i], xlab = impvar[i], main = paste("Partial Dependence on", impar[i], ylim = c(30, 70))}
for (i in 1:10){ partialPlot(fitrf, training, impvar[i], xlab = impvar[i], main = paste("Partial Dependence on", impar[i], ylim = c(30, 70))
}
for (i in 1:10) partialPlot(fitrf, training, impvar[i], xlab = impvar[i], main = paste("Partial Dependence on", impar[i], ylim = c(30, 70))
)
?partialPlot
partialPlot(fitrf,training)
b <- as.randomForest(fitrf)
library(randomForest)
partialPlot(fitrf,training)
b <- as.randomForest(fitrf)
fit = randomForest(classe~., training, importance = TRUE)
names(fit)
fit$importance
importance(fit)
imp <- importance(fit)
rownames(imp)
impvar = rownames(imp)[order(imp[,1], decreasing = TRUE)]
partialPlot(fit, training, impvar[1], xlab = impvar[1], main = paste("Partial Dependence om", impvar[1]), ylim=c(30,70))
op <- par(mfrow = c(2,3))
for(i in 1:5) {partialPlot(fit, training, impvar[i], xlab = impvar[i], main = paste("Partial Dependence om", impvar[i]), ylim=c(30,70))}
par(op)
plot(fitrf)
names(fitrf)
names(fitrf$finalModel)
fitrf$finalModel$err.rate
ww = fitrf$finalModel$err.rate
dim(ww)
names(fitrf$finalModel)
fitrf$finalModel$ntree
fitrf$finalModel$mtry
fitrf$finalModel$classes
fitrf$finalModel$inbag
fitrf$finalModel$test
fitrf$finalModel$confusion
fitrf$finalModel$votes
dim(fitrf$finalModel$votes)
head(fitrf$finalModel$votes)
dim(training)
ww = fitrf$finalModel$err.rate
dim(ww)
names(fitrf)
fitrf$bestTune
fitrf$coefnames
fitrf$term
names(fitrf$term)
names(fitrf)
names(fitrf$terms)
dim(fitrf$term)
dim(fitrf$terms)
class(fitrf$terms)
fitrf$terms$formula
sapply(names(fitrf),class)
sapply(names(fitrf),dim)
sapply(names(fitrf),str)
varImpPlot(fit)
varImpPlot(fitrf)
varImpPlot
names(fitrf)
fitrf$finalMOdel$importance
names(fitrf$finalModel)
varImp(fitrf)
plot(varImp(fitrf))
varImpPlot(varImp(fitrf))
varImp(fitrf)
pred
conf
fitrf
fitrf$finalModel
conf$overall
conf
conf
conftable
confoverall
confbyclass
fitrf$finalModel
?knitr
plot(varImp(fitrf)[1:10])
varImp(fitrf)
names(varImp(fitrf))
varImp(fit)$importance
varImp(fit)$calledFrom
varImp(fit)$model
fitrf
names(fitrf)
names(fitrf$finalModel)
fitrf$finalModel$importance
fitrf$finalModel$importance[1:10]
rowNames(fitrf$finalModel$importance)
rownames(fitrf$finalModel$importance)
ww= fitrf$finalModel$importance
ww
str(ww)
ww[1:10,]
varImp(fitrf)[1:10,]
as.data.frame(varImp(fitrf))
plot(ww)
plot(varImp(fitrf))
plot(fitrf)
dim(build)
dim(training)
dim(testing)
detail(build[1:5,1:5])
head(build[1:5,1:5])
build = read.csv(paste0(mydir,"training.csv"),stringsAsFactors = F)
str(build)
unique(build$user_name)
table(build$user_name)
rm(list = ls())
build = read.csv(paste0(mydir,"training.csv"),stringsAsFactors = F)
mydir <- "C:/Data Science Specialization - John Hopkins University/Course 8 - Practical Machine Learning/Project/"
build = read.csv(paste0(mydir,"training.csv"),stringsAsFactors = F)
dim(build)
?train
mydir <- "C:/Data Science Specialization - John Hopkins University/Course 8 - Practical Machine Learning/Project/"
# THE FOLLOWING SECTION HAS BEEN COMMENTED OUT, BECUASE THE DATA LOCAL
#training <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv")
#validation <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv")
#write.csv(training,paste0(mydir,"training.csv"))
#write.csv(validation,paste0(mydir,"validation.csv"))
# read in the training data set ( ie, build data set )
build = read.csv(paste0(mydir,"training.csv"),stringsAsFactors = F)
# read in the validation data set
validation = read.csv(paste0(mydir,"validation.csv"),stringsAsFactors = F)
library(magrittr)
build <- build[,-c(1:5)]
ind = sapply(build, function(x) x=="#DIV/0!" | x=="")
build[ind] <- NA
colremove <- colSums(sapply(build,is.na))/(dim(build)[1]) > .95
build <- build[,!colremove]
build[,c(1, 55)]%<>% lapply(function(x) as.factor(as.character(x)))  # create factor variable
buildstr <- build
validation <- validation[,-c(1:5)]
ind = sapply(validation, function(x) x=="#DIV/0!" | x=="")
validation[ind] <- NA
colremove <- colSums(sapply(validation,is.na))/(dim(validation)[1]) > .95
validation <- validation[,!colremove]
validation[,c(1, 55)]%<>% lapply(function(x) as.factor(as.character(x)))  # create factor variable
suppressMessages(library(caret))
set.seed(6464)
indext <- createDataPartition(y = build$classe, p = .75, list = F)
training <- build[indext,] ; dim(training)
testing <- build[-indext,] ; dim(testing)
suppressMessages(library(randomForest))
set.seed(3498)
fitControl <- trainControl(method="cv", number = 5) # option for 5-fold cross validation
fitrf <- train( classe~., data = training, trControl = fitControl, method = "rf", ntree = 50)
pred <- predict(fitrf, newdata = testing)
conf <- confusionMatrix(pred, testing$classe)
predv <- predict(fitrf, newdata = validation)
resultsv <- data.frame(problem_id = validation$problem_id, predicted = predv)
dim(validation)
rm(list = ls())
mydir <- "C:/Data Science Specialization - John Hopkins University/Course 8 - Practical Machine Learning/Project/"
shiny::runApp('C:/AAA/DataProducts/tutor1/tutor2/tutor2')
runApp('C:/AAA/DataProducts/tutor1/tutor2/tutor2')
runApp('C:/AAA/DataProducts/tutor1/tutor2/tutor2')
runApp(display.mode='showcase')
runApp('C:/AAA/DataProducts/tutor1/tutor2/tutor2', display.mode = 'showcase')
runApp('C:/AAA/DataProducts/tutor1/tutor2/tutor2', display.mode = 'showcase')
runApp('C:/AAA/DataProducts/tutor1/tutor2/tutor2', display.mode = 'showcase')
runApp('C:/AAA/DataProducts/tutor1/tutor2/tutor2', display.mode = 'showcase')
runApp('C:/AAA/DataProducts/tutor1/tutor2/tutor2', display.mode = 'showcase')
runApp('C:/AAA/DataProducts/tutor1/tutor2/tutor2', display.mode = 'showcase')
runApp('C:/AAA/DataProducts/tutor1/tutor2/tutor2')
runApp('C:/AAA/DataProducts/tutor1/tutor2/tutor2')
runApp('C:/AAA/DataProducts/tutor1/tutor2/tutor2')
runApp('C:/AAA/DataProducts/tutor1/tutor2/tutor2')
runApp('C:/AAA/DataProducts/tutor1/tutor2/tutor2', display.mode = 'showcase')
runApp('C:/AAA/DataProducts/tutor1/tutor2/tutor2', display.mode = 'showcase')
runApp('C:/AAA/DataProducts/tutor1/tutor2/tutor2', display.mode = 'showcase')
runApp('C:/AAA/DataProducts/tutor1/tutor2/tutor2', display.mode = 'showcase')
?Classes
getClass()
getClass
classes
classesToAM()
?Methods
mean
method("mean")
methods("mean")
show
showMethods("show")
show(1:10)
1:10
head(getS3method("mean", "default"))
head(getS3method("mean", "default"),10)
head(getS3method("mean", "default"),30)
mean
ww <- getS3method("mean", "default")
dim(ww)
length(ww)
head(getS3method("mean", "default"),50)
data("WorldPhones")
head(WorldPhones)
?WorldPhones
library(shiny)
library(slidify)
getwd()
?interactive
if (interactive()) {
shinyApp(
ui = fluidPage(numericInput("n", "n", 1),plotOutput("plot")),
server = function(input, output) {
output$plot <- renderPlot( plot(head(cars, input$n)) )}
)
)
library(shiny)
data("WorldPhones")
shinyApp(
ui = fluidPage(
selectInput("region", "Region:", choices = colnames(WorldPhones)),
plotOutput("phonePlot")),
server = function(input, output) {
output$phonePlot <- renderPlot({
barplot(WorldPhones[,input$region]*1000, ylab = "Number of Telephones", xlab = "Year")})},options = list(height = 500)
)
install.packages("webshot")
library(shiny); library(webshot)
data("WorldPhones")
shinyApp(
ui = fluidPage(
selectInput("region", "Region:", choices = colnames(WorldPhones)),
plotOutput("phonePlot")),
server = function(input, output) {
output$phonePlot <- renderPlot({
barplot(WorldPhones[,input$region]*1000, ylab = "Number of Telephones", xlab = "Year")})},options = list(height = 500)
)
shiny::runApp('C:/AAA/DataProducts/Project4/test1/pol')
runApp('C:/AAA/DataProducts/Project4/test1/pol')
runApp('C:/AAA/DataProducts/Project4/test1/pol')
runApp('C:/AAA/DataProducts/Project4/test1/pol')
runApp('C:/AAA/DataProducts/Project4/test1/pol')
runApp('C:/AAA/DataProducts/Project4/test1/pol')
runApp('C:/AAA/DataProducts/Project4/test1/pol')
runApp('C:/AAA/DataProducts/Project4/test1/pol')
runApp('C:/AAA/DataProducts/Project4/test1/pol')
runApp('C:/AAA/DataProducts/Project4/test1/pol')
runApp('C:/AAA/DataProducts/Project4/test1/pol')
runApp('C:/AAA/DataProducts/Project4/test1/pol')
runApp('C:/AAA/DataProducts/Project4/test1/pol')
runApp('C:/AAA/DataProducts/Project4/test1/pol')
runApp('C:/AAA/DataProducts/Project4/test1/pol')
runApp('C:/AAA/DataProducts/Project4/test1/pol')
runApp('C:/AAA/DataProducts/Project4/test1/pol')
runApp('C:/AAA/DataProducts/Project4/test1/pol')
runApp('C:/AAA/DataProducts/Project4/test1/pol')
runApp('C:/AAA/DataProducts/Project4/test1/pol')
runApp('C:/AAA/DataProducts/Project4/test1/pol')
runApp('C:/AAA/DataProducts/Project4/test1/pol')
runApp('C:/AAA/DataProducts/Project4/test1/pol')
print(source('C:/AAA/DataProducts/Project4/test1/pol/appcurrent.R')$value)
print(source('C:/AAA/DataProducts/Project4/test1/pol/appcurrent.R')$value)
runApp('C:/AAA/DataProducts/Project4/test1/pol')
runApp('C:/AAA/DataProducts/Project4/test1/pol')
runApp('C:/AAA/DataProducts/Project4/test1/pol')
runApp('C:/AAA/DataProducts/Project4/test1/pol')
runApp('C:/AAA/DataProducts/Project4/test1/pol')
?navbarPage
library(shiny)
?navbarPage
?mainPanel
runApp('C:/AAA/DataProducts/Project4/test1/butterbean')
runApp('C:/AAA/DataProducts/Project4/test1/butterbean')
runApp('C:/AAA/DataProducts/Project4/test1/butterbean')
runApp('C:/AAA/DataProducts/Project4/test1/butterbean')
runApp('C:/AAA/DataProducts/Project4/test1/butterbean')
runApp('C:/AAA/DataProducts/Project4/test1/butterbean')
runApp('C:/AAA/DataProducts/Project4/test1/pea')
runApp('C:/AAA/DataProducts/Project4/test1/pea')
runApp('C:/AAA/DataProducts/Project4/test1/pea')
runApp('C:/AAA/DataProducts/Project4/test1/pea')
runApp('C:/AAA/DataProducts/Project4/test1/pea')
runApp('C:/AAA/DataProducts/Project4/test1/ytth')
runApp('C:/AAA/DataProducts/Project4/test1/rtrg')
?sidebarLayout
?navbarPage
?tabPanel
runApp('C:/AAA/DataProducts/Project4/test1/rtrg')
runApp('C:/AAA/DataProducts/Project4/test1/rtrg')
runApp('C:/AAA/DataProducts/Project4/test1/rtrg')
runApp('C:/AAA/DataProducts/Project4/test1/rtrg')
runApp('C:/AAA/DataProducts/Project4/test1/rtrg')
library(DT)
?DT
library(shiny); print(source('C:/AAA/DataProducts/Project4/test1/pol/appcurrent.R')$value)
print(source('C:/AAA/DataProducts/Project4/test1/pol/appcurrent.R')$value)
print(source('C:/AAA/DataProducts/Project4/test1/pol/appcurrent.R')$value)
print(source('C:/AAA/DataProducts/Project4/test1/pol/appcurrent.R')$value)
print(source('C:/AAA/DataProducts/Project4/test1/pol/appcurrent.R')$value)
print(source('C:/AAA/DataProducts/Project4/test1/pol/appcurrent.R')$value)
print(source('C:/AAA/DataProducts/Project4/test1/pol/appcurrent.R')$value)
print(source('C:/AAA/DataProducts/Project4/test1/pol/appcurrent.R')$value)
print(source('C:/AAA/DataProducts/Project4/test1/pol/appcurrent.R')$value)
print(source('C:/AAA/DataProducts/Project4/test1/pol/appcurrent.R')$value)
setwd("C:/AAA/DataProducts/FinalProject")
runApp()
runApp()
setwd("C:/AAA/DataProducts/FinalProject/ShinyFolder")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?trainControl
?train
?rf
?train
runApp()
?fuildRow
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
mydir <- "C:/Data Science Specialization - John Hopkins University/Course 8 - Practical Machine Learning/Project/"
validation = read.csv(paste0(mydir,"validation.csv"),stringsAsFactors = F)
validation <- validation[,-c(1:7)]
ind = sapply(validation, function(x) x=="#DIV/0!" | x=="")
validation[ind] <- NA
colremove <- colSums(sapply(validation,is.na))/(dim(validation)[1]) > .95
validation <- validation[,!colremove]
str(validation)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
getwd()
rm(list = ls())
runApp()
